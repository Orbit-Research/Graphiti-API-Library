cmake_minimum_required(VERSION 3.15)
project(Graphiti VERSION 1.0.0 LANGUAGES CXX)

# 1. Define the library
add_library(Graphiti SHARED 
    src/API.cpp 
    src/Extension.cpp
    src/Connection/Connection_VCP.cpp
)

# 2. Public headers (users will #include these)
target_include_directories(Graphiti PUBLIC
    $<BUILD_INTERFACE:${CMAKE_CURRENT_SOURCE_DIR}/include>  # During development
    $<INSTALL_INTERFACE:include>                            # After installation
)

# 3. Dependencies (asio + system libs)
find_package(asio REQUIRED)
target_link_libraries(Graphiti PUBLIC 
    asio::asio
    ws2_32
)

# 4. Installation rules (critical for find_package)
include(GNUInstallDirs)
install(TARGETS Graphiti
    EXPORT GraphitiTargets           # Generates GraphitiTargets.cmake
    LIBRARY DESTINATION ${CMAKE_INSTALL_LIBDIR}
    ARCHIVE DESTINATION ${CMAKE_INSTALL_LIBDIR}
    RUNTIME DESTINATION ${CMAKE_INSTALL_BINDIR}
    INCLUDES DESTINATION ${CMAKE_INSTALL_INCLUDEDIR}
)

# 5. Install headers (mirror your include structure)
install(DIRECTORY include/ DESTINATION ${CMAKE_INSTALL_INCLUDEDIR})

# 6. Export targets (enables find_package)
install(EXPORT GraphitiTargets
    FILE GraphitiConfig.cmake
    NAMESPACE Graphiti::
    DESTINATION ${CMAKE_INSTALL_LIBDIR}/cmake/Graphiti
)

# 7. Generate config version file
include(CMakePackageConfigHelpers)
write_basic_package_version_file(
    GraphitiConfigVersion.cmake
    VERSION ${PROJECT_VERSION}
    COMPATIBILITY SameMajorVersion
)
install(FILES 
    ${CMAKE_CURRENT_BINARY_DIR}/GraphitiConfigVersion.cmake
    DESTINATION ${CMAKE_INSTALL_LIBDIR}/cmake/Graphiti
)